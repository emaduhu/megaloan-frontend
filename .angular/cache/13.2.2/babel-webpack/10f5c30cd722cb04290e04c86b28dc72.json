{"ast":null,"code":"import _classCallCheck from \"/home/evaristus/PycharmProjects/tpdc/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/evaristus/PycharmProjects/tpdc/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var AuthenticationService = /*#__PURE__*/(function () {\n  var AuthenticationService = /*#__PURE__*/function () {\n    function AuthenticationService(http) {\n      _classCallCheck(this, AuthenticationService);\n\n      this.http = http;\n      this.authUrl = environment.authUrl;\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n      this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    _createClass(AuthenticationService, [{\n      key: \"currentUserValue\",\n      get: function get() {\n        return this.currentUserSubject.value;\n      }\n    }, {\n      key: \"login\",\n      value: function login(username, password) {\n        var _this = this;\n\n        return this.http.post(\"\".concat(this.authUrl, \"/auth/login\"), {\n          username: username,\n          password: password\n        }).pipe(map(function (user) {\n          // store user details and jwt token in local storage to keep user logged in between page refreshes\n          localStorage.setItem('currentUser', JSON.stringify(user));\n\n          _this.currentUserSubject.next(user); // if (!user) return this.error('Username or password is incorrect');\n\n\n          return user;\n        }));\n      } // With fakeProvider\n      // login(username: string, password: string) {\n      //     return this.http.post<any>(`/users/authenticate`, { username, password })\n      //         .pipe(map(user => {\n      //             // store user details and jwt token in local storage to keep user logged in between page refreshes\n      //             localStorage.setItem('currentUser', JSON.stringify(user));\n      //             this.currentUserSubject.next(user);\n      //             return user;\n      //         }));\n      // }\n\n    }, {\n      key: \"logout\",\n      value: function logout() {\n        // remove user from local storage to log user out\n        localStorage.removeItem('currentUser');\n        this.currentUserSubject.next(null);\n      }\n    }]);\n\n    return AuthenticationService;\n  }();\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}